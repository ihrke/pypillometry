{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Tim Cools Eye data"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Create datafile\n",
    "\n",
    "- subj\n",
    "- trial\n",
    "- value left\n",
    "- value right\n",
    "- maybe Qv left\n",
    "- maybe Qv right\n",
    "- prop viewing time left\n",
    "- prop viewing time right\n",
    "- first saccade (quantified as left/right) - which ROI was first \"hit\"; value will be \"left\", \"right\", \"none\"\n",
    "- task-focus: 1 - if 5 trials before MW probe; 2 - if 5 trials before OT probe; 0 otherwise\n",
    "\n",
    "\n",
    "### Hyp 1: first saccade to higher valued object?\n",
    "\n",
    "Analysis:\n",
    "\n",
    "- var1: if(first-saccade=left) left value, if(first-saccade=right), right value\n",
    "- var2: the opposite (i.e., the value of the object that did NOT receive the first saccade)\n",
    "- calculate diff=var1-var2\n",
    "- mean(diff) per subject\n",
    "- one-sample t-test with expect t>0\n",
    "\n",
    "### Hyp 2: relationship viewing time vs. value\n",
    "\n",
    "Analysis:\n",
    "\n",
    "- var1: proportion viewing time to higher valued object (if left val>right val: left-viewing-time; if right val>left val: right-viewing-time)\n",
    "- var2: abs(left value - right value)\n",
    "- Correlation(var1,var2) per subject\n",
    "- Fisher z-transform of the correlation coefficient for each subj\n",
    "- one-sided t-test on all the z-transformed correlations (expect t>0)\n",
    "\n",
    "### Hyp 3:  stimuli will receive more equal viewing time during periods of mind wandering than during periods of attention\n",
    "\n",
    "- use var1 and var2 from Hyp2\n",
    "- filter out, var1 and var2 where task-focus==MW or OT\n",
    "- gets you OT_var1, MW_var1, OT_var2, MW_var2\n",
    "- ANOVA: with factors OT vs. MW and var1 vs. var2\n",
    "- hypothesis: IA is significant\n",
    "- be prepared for lower power, because some people don't have MW trials\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "Hypotheses: value and viewing time\n",
    "Hypotheses involving MW: filter by task-focus"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "/Users/mmi041/Dropbox/work/projects/pupil/pypillometry/pypillometry\n"
     ]
    }
   ],
   "source": [
    "import sys, os\n",
    "sys.path.insert(0,\"..\") # this is not needed if you have installed pypillometry\n",
    "import pypillometry as pp\n",
    "print(pp.__package_path__) # check that correct version is being used\n",
    "import pandas as pd\n",
    "import numpy as np\n",
    "import scipy\n",
    "import pylab as plt\n",
    "import glob"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 21,
   "metadata": {},
   "outputs": [],
   "source": [
    "parent_path=os.path.expanduser(\"~/work/projects/mw/mw-learning/mwlearning_analysis/eyedata/\")\n",
    "data_path=os.path.join(parent_path, \"asc/\")\n",
    "plot_dir=os.path.join(parent_path, \"plots/\")\n",
    "subjects = [\"%03i\"%i for i in range(1,51)]\n",
    "exclude_preproc=[\"018\", \"029\", \"032\", \"039\", \"044\", \"047\", \"049\"]\n",
    "subjs=list(set(subjects).difference(exclude_preproc))\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 20,
   "metadata": {},
   "outputs": [],
   "source": [
    "def read_subject(subject, data_path=data_path):\n",
    "    ## loading the raw samples from the asc file\n",
    "    fname_samples=os.path.join(data_path, \"{subj}_rlmw_samples.asc\".format(subj=subject))\n",
    "    df=pd.read_table(fname_samples, index_col=False,\n",
    "                    names=[\"time\", \"left_x\", \"left_y\", \"left_p\",\n",
    "                            \"right_x\", \"right_y\", \"right_p\"])\n",
    "\n",
    "    ## Eyelink tracker puts \"   .\" when no data is available for x/y coordinates\n",
    "    left_x=df.left_x.values\n",
    "    left_x[left_x==\"   .\"] = np.nan\n",
    "    left_x = left_x.astype(float)\n",
    "\n",
    "    left_y=df.left_y.values\n",
    "    left_y[left_y==\"   .\"] = np.nan\n",
    "    left_y = left_y.astype(float)\n",
    "\n",
    "    right_x=df.right_x.values\n",
    "    right_x[right_x==\"   .\"] = np.nan\n",
    "    right_x = right_x.astype(float)\n",
    "\n",
    "    right_y=df.right_y.values\n",
    "    right_y[right_y==\"   .\"] = np.nan\n",
    "    right_y = right_y.astype(float)\n",
    "\n",
    "    ## Loading the events from the events file\n",
    "    fname_events=os.path.join(data_path, \"{subj}_rlmw_events.asc\".format(subj=subject))\n",
    "    # read the whole file into variable `events` (list with one entry per line)\n",
    "    with open(fname_events) as f:\n",
    "        events=f.readlines()\n",
    "\n",
    "    # keep only lines starting with \"MSG\"\n",
    "    events=[ev for ev in events if ev.startswith(\"MSG\")]\n",
    "    experiment_start_index=np.where([\"experiment_start\" in ev for ev in events])[0][0]\n",
    "    events=events[experiment_start_index+1:]\n",
    "    df_ev=pd.DataFrame([ev.split() for ev in events])\n",
    "    df_ev=df_ev[[1,2]]\n",
    "    df_ev.columns=[\"time\", \"event\"]\n",
    "\n",
    "    # Creating EyeData object that contains both X-Y coordinates\n",
    "    # and pupil data\n",
    "    d = pp.EyeData(time=df.time, name=\"{subj}_ceylin\".format(subj=subject),\n",
    "                screen_resolution=(1280,1024), physical_screen_size=(33.75,27),\n",
    "                screen_eye_distance=60,\n",
    "                left_x=left_x, left_y=left_y, left_pupil=df.left_p,\n",
    "                right_x=right_x, right_y=right_y, right_pupil=df.right_p,\n",
    "                event_onsets=df_ev.time, event_labels=df_ev.event,\n",
    "                keep_orig=True)\\\n",
    "                .reset_time()\n",
    "    d.set_experiment_info(screen_eye_distance=60, \n",
    "                        screen_resolution=(1280,1024), \n",
    "                        physical_screen_size=(30, 20))\n",
    "    return d"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 33,
   "metadata": {},
   "outputs": [],
   "source": [
    "# load pre-processed pupil data from Ceylin\n",
    "pdata = pp.pd_read_pickle(os.path.join(parent_path, \"pupildata_2024_03_19.pkl\"))\n",
    "pdata = {k:v for k,v in pdata.items() if k in subjs}"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "edata={}\n",
    "for subject in subjs:\n",
    "    print(\"Processing subject %s\"%subject)\n",
    "\n",
    "    d = read_subject(subject)\n",
    "    # remove the interpolated points from the pupil processing from saccade data\n",
    "    for key in d.data.keys():\n",
    "        d.data[key][pdata[subject].interpolated_mask==1]=np.nan\n",
    "    edata[subject]=d"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "## prop_viewing time left and right\n",
    "#  - operationalize as proportion of time spent looking at left and right side of screen"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 129,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "001 002 003 004 005 006 007 008 009 010 011 012 013 014 015 016 017 019 020 021 022 023 024 025 026 027 028 030 031 033 034 035 036 037 038 040 041 042 043 045 046 048 050 "
     ]
    }
   ],
   "source": [
    "def trial_stim_choice(key, trial=None):\n",
    "    tup=key.split(\"_\")\n",
    "    ev=tup[0]; ctrial=tup[1]\n",
    "    return (ev==\"S\" or ev==\"C\") and ctrial==str(trial)\n",
    "\n",
    "d.test_selector(trial_stim_choice, trial=10)\n",
    "\n",
    "def get_stim_choice_interval(d):\n",
    "    \"\"\"get interval between stimulus onset and choice\"\"\"\n",
    "    ntrials=300\n",
    "    ivs=[]\n",
    "    for i in range(ntrials):\n",
    "        iv = d.get_intervals(trial_stim_choice, padding=(0,1), trial=i+1)\n",
    "        ivs.append( (iv[0][0], iv[1][0]) )\n",
    "    return ivs\n",
    "\n",
    "outdata = []\n",
    "\n",
    "for subj in sorted(subjs):\n",
    "    print(\"%s \"%subj, end=\"\")\n",
    "    ivs=get_stim_choice_interval(d)\n",
    "    screenmid = d.screen_xlim[1]/2\n",
    "\n",
    "    propleft=[]\n",
    "    propright=[]\n",
    "    firstsacc=[]\n",
    "    for start,end in ivs:\n",
    "        startix=np.argmin(np.abs(d.tx-start))\n",
    "        endix=np.argmin(np.abs(d.tx-end))\n",
    "\n",
    "        ## proportion left and right\n",
    "        nleft = np.sum(d.data[\"left_x\"][startix:endix] < screenmid)\n",
    "        nright = np.sum(d.data[\"left_x\"][startix:endix] > screenmid)\n",
    "        propleft.append(nleft/(nleft+nright)*100)\n",
    "        propright.append(nright/(nleft+nright)*100)\n",
    "\n",
    "        ## first saccade left or right\n",
    "        # when x-coord of first sample comes closes to leftstim/rightstim \n",
    "        leftstim=screenmid-(screenmid/2)\n",
    "        rightstim=screenmid+(screenmid/2)\n",
    "        fsacc=\"none\"\n",
    "        ixleft = np.where(d.data[\"left_x\"][startix:endix]<leftstim+200)\n",
    "        if len(ixleft[0])>0:\n",
    "            ixleft=ixleft[0][0]\n",
    "        else:\n",
    "            ixleft=np.nan\n",
    "        ixright= np.where(d.data[\"left_x\"][startix:endix]>rightstim-200)\n",
    "        if len(ixright[0])>0:\n",
    "            ixright=ixright[0][0]\n",
    "        else:\n",
    "            ixright=np.nan\n",
    "        if not (np.isnan(ixleft) and np.isnan(ixright)):\n",
    "            fsacc = [\"left\",\"right\"][np.nanargmin([ixleft,ixright])]\n",
    "        firstsacc.append(fsacc)\n",
    "    \n",
    "    out = {\"subj\":subj,\"trial\":np.arange(300)+1, \n",
    "           \"propleft\":propleft, \"propright\":propright,\n",
    "           \"firstsaccade\":firstsacc}\n",
    "    outdata.append(out)\n",
    "\n",
    "\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 130,
   "metadata": {},
   "outputs": [],
   "source": [
    "odata = pd.concat([pd.DataFrame(out) for out in outdata])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 128,
   "metadata": {},
   "outputs": [],
   "source": [
    "odata.to_csv(os.path.join(parent_path, \"tim_prop_viewing_time.csv\"), index=False)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "pypil",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.11.3"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 2
}
