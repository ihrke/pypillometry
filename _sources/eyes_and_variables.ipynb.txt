{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Processing monocular and binocular data"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "metadata": {},
   "outputs": [],
   "source": [
    "%load_ext autoreload\n",
    "%autoreload 2\n",
    "import sys\n",
    "sys.path.insert(0,\"..\")\n",
    "import pypillometry as pp\n",
    "import numpy as np"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Data in `pypillometry` can contain different `variables` from different `eyes`. The variables and eyes supported when importing raw data are\n",
    "\n",
    "- `left_x`, `right_x` (x-coordinate in screen coordinates from the eyetracker)\n",
    "- `left_y`, `right_y` (y-coordinate in screen coordinates from the eyetracker)\n",
    "- `left_pupil`, `right_pupil` (pupil size from left and right eye)\n",
    "\n",
    "Depending on which class is chosen (`PupilData`, `GazeData` or `EyeData`), some of these variables are required:\n",
    "\n",
    "- `PupilData`: requires at least one of `left_pupil`, `right_pupil` (or both)\n",
    "- `GazeData`: requires at least one of `(left_x, left_y)` and/or `(right_x, right_y)`\n",
    "- `EyeData`: requires `x`,`y` and `pupil` from at least one eye\n",
    "\n",
    "For example, let's simulate some basic data:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "metadata": {},
   "outputs": [
    {
     "ename": "ValueError",
     "evalue": "At least one of the eye-traces must be provided (both x and y)",
     "output_type": "error",
     "traceback": [
      "\u001b[0;31m---------------------------------------------------------------------------\u001b[0m",
      "\u001b[0;31mValueError\u001b[0m                                Traceback (most recent call last)",
      "Cell \u001b[0;32mIn[2], line 17\u001b[0m\n\u001b[1;32m     12\u001b[0m deye \u001b[38;5;241m=\u001b[39m pp\u001b[38;5;241m.\u001b[39mEyeData(left_x\u001b[38;5;241m=\u001b[39mleft_x, left_y\u001b[38;5;241m=\u001b[39mleft_y, left_pupil\u001b[38;5;241m=\u001b[39mleft_pupil, time\u001b[38;5;241m=\u001b[39mtime)\n\u001b[1;32m     14\u001b[0m \u001b[38;5;66;03m# these are not ok\u001b[39;00m\n\u001b[1;32m     15\u001b[0m \u001b[38;5;66;03m#pp.PupilData(left_x=left_x, time=time)\u001b[39;00m\n\u001b[1;32m     16\u001b[0m \u001b[38;5;66;03m#pp.GazeData(left_x=left_x, time=time)\u001b[39;00m\n\u001b[0;32m---> 17\u001b[0m pp\u001b[38;5;241m.\u001b[39mEyeData(left_x\u001b[38;5;241m=\u001b[39mleft_x, time\u001b[38;5;241m=\u001b[39mtime)\n",
      "File \u001b[0;32m~/Dropbox/work/projects/pupil/pypillometry/docs/../pypillometry/eyedata/eyedata.py:96\u001b[0m, in \u001b[0;36mEyeData.__init__\u001b[0;34m(self, time, left_x, left_y, left_pupil, right_x, right_y, right_pupil, event_onsets, event_labels, sampling_rate, screen_resolution, physical_screen_size, screen_eye_distance, name, fill_time_discontinuities, keep_orig, notes, inplace, use_cache, cache_dir, max_memory_mb)\u001b[0m\n\u001b[1;32m     94\u001b[0m logger\u001b[38;5;241m.\u001b[39mdebug(\u001b[38;5;124m\"\u001b[39m\u001b[38;5;124mCreating EyeData object\u001b[39m\u001b[38;5;124m\"\u001b[39m)\n\u001b[1;32m     95\u001b[0m \u001b[38;5;28;01mif\u001b[39;00m (left_x \u001b[38;5;129;01mis\u001b[39;00m \u001b[38;5;28;01mNone\u001b[39;00m \u001b[38;5;129;01mor\u001b[39;00m left_y \u001b[38;5;129;01mis\u001b[39;00m \u001b[38;5;28;01mNone\u001b[39;00m) \u001b[38;5;129;01mand\u001b[39;00m (right_x \u001b[38;5;129;01mis\u001b[39;00m \u001b[38;5;28;01mNone\u001b[39;00m \u001b[38;5;129;01mor\u001b[39;00m right_y \u001b[38;5;129;01mis\u001b[39;00m \u001b[38;5;28;01mNone\u001b[39;00m):\n\u001b[0;32m---> 96\u001b[0m     \u001b[38;5;28;01mraise\u001b[39;00m \u001b[38;5;167;01mValueError\u001b[39;00m(\u001b[38;5;124m\"\u001b[39m\u001b[38;5;124mAt least one of the eye-traces must be provided (both x and y)\u001b[39m\u001b[38;5;124m\"\u001b[39m)\n\u001b[1;32m     97\u001b[0m \u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39mdata\u001b[38;5;241m=\u001b[39mEyeDataDict(left_x\u001b[38;5;241m=\u001b[39mleft_x, left_y\u001b[38;5;241m=\u001b[39mleft_y, left_pupil\u001b[38;5;241m=\u001b[39mleft_pupil,\n\u001b[1;32m     98\u001b[0m                         right_x\u001b[38;5;241m=\u001b[39mright_x, right_y\u001b[38;5;241m=\u001b[39mright_y, right_pupil\u001b[38;5;241m=\u001b[39mright_pupil)\n\u001b[1;32m    100\u001b[0m \u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39m_init_common(time, sampling_rate, \n\u001b[1;32m    101\u001b[0m                   event_onsets, event_labels, \n\u001b[1;32m    102\u001b[0m                   name, fill_time_discontinuities, \n\u001b[0;32m   (...)\u001b[0m\n\u001b[1;32m    105\u001b[0m                   cache_dir\u001b[38;5;241m=\u001b[39mcache_dir,\n\u001b[1;32m    106\u001b[0m                   max_memory_mb\u001b[38;5;241m=\u001b[39mmax_memory_mb)\n",
      "\u001b[0;31mValueError\u001b[0m: At least one of the eye-traces must be provided (both x and y)"
     ]
    }
   ],
   "source": [
    "left_x = np.random.randn(1000)\n",
    "right_x = np.random.randn(1000)\n",
    "left_y = np.random.randn(1000)\n",
    "right_y = np.random.randn(1000)\n",
    "left_pupil = np.random.randn(1000)\n",
    "right_pupil = np.random.randn(1000)\n",
    "time = np.arange(1000)\n",
    "\n",
    "# these are all ok\n",
    "dpupil = pp.PupilData(left_pupil=left_pupil, right_pupil=right_pupil, time=time)\n",
    "dgaze = pp.GazeData(left_x=left_x, left_y=left_y, right_x=right_x, right_y=right_y, time=time)\n",
    "deye = pp.EyeData(left_x=left_x, left_y=left_y, left_pupil=left_pupil, time=time)\n",
    "\n",
    "# these are not ok\n",
    "#pp.PupilData(left_x=left_x, time=time)\n",
    "#pp.GazeData(left_x=left_x, time=time)\n",
    "pp.EyeData(left_x=left_x, time=time)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Once the data is loaded, we can check which variables and eyes are available using the `.eyes` and `.variables` attribute:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 18,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(['left'], ['y', 'x', 'pupil'])"
      ]
     },
     "execution_count": 18,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "deye.eyes, deye.variables"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Simply printing an object will also show what data sources are available and give a glimpse into the data structure:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 19,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "EyeData(mohavedi, 55.6KiB):\n",
       " n                   : 1000\n",
       " sampling_rate       : 1000.0\n",
       " data                : ['left_x', 'left_y', 'left_pupil']\n",
       " nevents             : 0\n",
       " screen_limits       : not set\n",
       " physical_screen_size: not set\n",
       " screen_eye_distance : not set\n",
       " duration_minutes    : 0.016666666666666666\n",
       " start_min           : 0.0\n",
       " end_min             : 0.01665\n",
       " parameters          : {}\n",
       " glimpse             : EyeDataDict(vars=3,n=1000,shape=(1000,)): \n",
       "  left_x (float64): 0.8876909354995632, 0.16382869242207718, 0.3047045451052535, 0.3712526256462054, -0.671312798889201...\n",
       "  left_y (float64): 0.4534143924559185, -0.11460988667664473, 0.7994674729621215, -1.265084426172219, 0.777019688126354...\n",
       "  left_pupil (float64): -1.008303529610942, -1.7674272682382004, -1.3504472492905297, -0.8307784244907553, -0.940278451803245...\n",
       "\n",
       " eyes                : ['left']\n",
       " nblinks             : {}\n",
       " blinks              : {'left': None}\n",
       " params              : {}\n",
       " History:\n",
       " *\n",
       " â”” fill_time_discontinuities()"
      ]
     },
     "execution_count": 19,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "deye"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(['y', 'x', 'pupil'], ['left', 'right'])"
      ]
     },
     "execution_count": 4,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "d = pp.get_example_data(\"rlmw_002_short\")\n",
    "d.variables, d.eyes"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Almost all of `pypillometry`'s functions have keyword arguments `eyes=` and `variables=` that specify which eyes/variables to operate on. By default, all of the variables and eyes are processed. \n",
    "\n",
    "For example, we can run the `scale()` function that will re-scale the data to have mean=0 and standard devation 1. \n",
    "Here, we use the context manager `pp.loglevel(\"DEBUG\")` to get output from `pypillometry` internals:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 24,
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "\u001b[32mpp: 12:38:57\u001b[0m | \u001b[34m\u001b[1mDEBUG   \u001b[0m | \u001b[36m_get_eye_var\u001b[0m:\u001b[36m194\u001b[0m | \u001b[34m\u001b[1mscale(): eyes=['left'], vars=['y', 'x', 'pupil']\u001b[0m\n",
      "\u001b[32mpp: 12:38:57\u001b[0m | \u001b[34m\u001b[1mDEBUG   \u001b[0m | \u001b[36mscale\u001b[0m:\u001b[36m820\u001b[0m | \u001b[34m\u001b[1mMean: {'left': {'y': 7.105427357601002e-18, 'x': 4.440892098500626e-19, 'pupil': -1.4210854715202004e-17}}\u001b[0m\n",
      "\u001b[32mpp: 12:38:57\u001b[0m | \u001b[34m\u001b[1mDEBUG   \u001b[0m | \u001b[36mscale\u001b[0m:\u001b[36m821\u001b[0m | \u001b[34m\u001b[1mSD: {'left': {'y': 1.0, 'x': 1.0, 'pupil': 1.0}}\u001b[0m\n"
     ]
    }
   ],
   "source": [
    "with pp.loglevel(\"DEBUG\"):\n",
    "    deye.scale(eyes=\"left\")"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "The output shows that all variables from the left eye have been processed. \n",
    "\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Which functions work on which data?\n",
    "\n",
    "Not all of `pypillometry`s functions can be applied to all variables. Functions that are specific to pupil data have the prefix `pupil_*` and functions that only work on gaze (x/y) data, have the prefix `gaze_`. The other functions will operate on all variables (which may or may not make sense, it is up to you to check!)."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Creating new variables or eyes\n",
    "\n",
    "In some cases, new variables or \"eyes\" can be created. For example, we might consider to reduce a binocular dataset to one where we average the timeseries from the two eyes. In that case, we can use function `merge_eyes()`:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 25,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "PupilData(mikugere, 56.3KiB):\n",
       " n               : 1000\n",
       " sampling_rate   : 1000.0\n",
       " eyes            : ['left', 'mean', 'right']\n",
       " data            : ['left_pupil', 'right_pupil', 'mean_pupil']\n",
       " nevents         : 0\n",
       " nblinks         : {}\n",
       " blinks          : {'left': None, 'mean': None, 'right': None}\n",
       " duration_minutes: 0.016666666666666666\n",
       " start_min       : 0.0\n",
       " end_min         : 0.01665\n",
       " params          : {}\n",
       " glimpse         : EyeDataDict(vars=3,n=1000,shape=(1000,)): \n",
       "  left_pupil (float64): -1.008303529610942, -1.7674272682382004, -1.3504472492905297, -0.8307784244907553, -0.940278451803245...\n",
       "  right_pupil (float64): -1.0847455379130668, -0.37366426340867454, 0.008197941206316955, -0.907624569163347, 0.6937086269810662...\n",
       "  mean_pupil (float64): -1.0465245337620044, -1.0705457658234374, -0.6711246540421064, -0.8692014968270512, -0.12328491241108941...\n",
       "\n",
       " History:\n",
       " *\n",
       " â”” fill_time_discontinuities()\n",
       "  â”” merge_eyes(eyes=['left', 'right'],variables=['pupil'],method=mean)"
      ]
     },
     "execution_count": 25,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "dpupil.merge_eyes(eyes=[\"left\", \"right\"], variables=[\"pupil\"], method=\"mean\")"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "We can see that a new \"eye\" with variable \"pupil\" called `mean_pupil` has been created. In this case, the original data `left_pupil` and `right_pupil` have been preserved (this can be changed by using `keep_eyes=False`).\n",
    "\n",
    "In other cases, the package can create new variables. For example, the function `pupil_estimate_baseline()` will estimate tonic fluctuation in the pupil (see https://osf.io/preprints/psyarxiv/7ju4a_v2/) and will create a new variable `<eye>_baseline`."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "\u001b[32mpp: 12:55:17\u001b[0m | \u001b[1mINFO    \u001b[0m | \u001b[36mbaseline_envelope_iter_bspline\u001b[0m:\u001b[36m250\u001b[0m | \u001b[1mOptimizing Stan model\u001b[0m\n",
      "12:55:17 - cmdstanpy - INFO - Chain [1] start processing\n",
      "12:55:17 - cmdstanpy - INFO - Chain [1] done processing\n",
      "12:55:17 - cmdstanpy - WARNING - The default behavior of CmdStanVB.stan_variable() will change in a future release to return the variational sample, rather than the mean.\n",
      "To maintain the current behavior, pass the argument mean=True\n",
      "\u001b[32mpp: 12:55:17\u001b[0m | \u001b[1mINFO    \u001b[0m | \u001b[36mbaseline_envelope_iter_bspline\u001b[0m:\u001b[36m259\u001b[0m | \u001b[1mEstimating PRF model (NNLS)\u001b[0m\n",
      "\u001b[32mpp: 12:55:17\u001b[0m | \u001b[1mINFO    \u001b[0m | \u001b[36mbaseline_envelope_iter_bspline\u001b[0m:\u001b[36m291\u001b[0m | \u001b[1mOptimizing 2nd Stan model\u001b[0m\n",
      "12:55:17 - cmdstanpy - INFO - Chain [1] start processing\n",
      "12:55:17 - cmdstanpy - INFO - Chain [1] done processing\n",
      "12:55:17 - cmdstanpy - WARNING - The default behavior of CmdStanVB.stan_variable() will change in a future release to return the variational sample, rather than the mean.\n",
      "To maintain the current behavior, pass the argument mean=True\n",
      "\u001b[32mpp: 12:55:17\u001b[0m | \u001b[1mINFO    \u001b[0m | \u001b[36mbaseline_envelope_iter_bspline\u001b[0m:\u001b[36m250\u001b[0m | \u001b[1mOptimizing Stan model\u001b[0m\n",
      "12:55:17 - cmdstanpy - INFO - Chain [1] start processing\n",
      "12:55:17 - cmdstanpy - INFO - Chain [1] done processing\n",
      "12:55:17 - cmdstanpy - WARNING - The default behavior of CmdStanVB.stan_variable() will change in a future release to return the variational sample, rather than the mean.\n",
      "To maintain the current behavior, pass the argument mean=True\n",
      "\u001b[32mpp: 12:55:17\u001b[0m | \u001b[1mINFO    \u001b[0m | \u001b[36mbaseline_envelope_iter_bspline\u001b[0m:\u001b[36m259\u001b[0m | \u001b[1mEstimating PRF model (NNLS)\u001b[0m\n",
      "\u001b[32mpp: 12:55:17\u001b[0m | \u001b[1mINFO    \u001b[0m | \u001b[36mbaseline_envelope_iter_bspline\u001b[0m:\u001b[36m291\u001b[0m | \u001b[1mOptimizing 2nd Stan model\u001b[0m\n",
      "12:55:17 - cmdstanpy - INFO - Chain [1] start processing\n",
      "12:55:17 - cmdstanpy - INFO - Chain [1] done processing\n",
      "12:55:17 - cmdstanpy - WARNING - The default behavior of CmdStanVB.stan_variable() will change in a future release to return the variational sample, rather than the mean.\n",
      "To maintain the current behavior, pass the argument mean=True\n"
     ]
    },
    {
     "data": {
      "text/plain": [
       "EyeData(test short, 2.7MiB):\n",
       " n                   : 20465\n",
       " sampling_rate       : 500.0\n",
       " data                : ['left_x', 'left_y', 'left_pupil', 'right_x', 'right_y', 'right_pupil', 'left_baseline', 'right_baseline']\n",
       " nevents             : 40\n",
       " screen_limits       : ((0, 1280), (0, 1024))\n",
       " physical_screen_size: (30, 20)\n",
       " screen_eye_distance : not set\n",
       " duration_minutes    : 0.6821666666666667\n",
       " start_min           : 0.0\n",
       " end_min             : 0.6821333333333333\n",
       " parameters          : {}\n",
       " glimpse             : EyeDataDict(vars=8,n=20465,shape=(20465,)): \n",
       "  left_x (float64): 655.6, 655.7, 655.0, 654.5, 655.0...\n",
       "  left_y (float64): 599.9, 598.9, 597.6, 597.8, 597.8...\n",
       "  left_pupil (float64): 1121.0, 1122.0, 1124.0, 1126.0, 1126.0...\n",
       "  right_x (float64): 773.1, 773.8, 774.8, 776.3, 776.7...\n",
       "  right_y (float64): 594.2, 593.9, 596.5, 597.4, 597.3...\n",
       "  right_pupil (float64): 949.0, 951.0, 956.0, 959.0, 960.0...\n",
       "  left_baseline (float64): 997.432053194403, 998.2207124709803, 999.0038298716057, 999.7814195245737, 1000.5534955581763...\n",
       "  right_baseline (float64): 853.8021043980411, 854.5397452521921, 855.2718689137017, 855.9984895804901, 856.7196214504758...\n",
       "\n",
       " eyes                : ['left', 'right']\n",
       " nblinks             : {}\n",
       " blinks              : {'left': None, 'right': None}\n",
       " params              : {}\n",
       " History:\n",
       " *\n",
       " â”” fill_time_discontinuities()\n",
       "  â”” reset_time()\n",
       "   â”” pupil_estimate_baseline()"
      ]
     },
     "execution_count": 3,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "d = pp.get_example_data(\"rlmw_002_short\")\n",
    "d.pupil_estimate_baseline()"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "pypil",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.12.5"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 2
}
